# MSDOS Makefile for ATP utilities
# 
# For use with most versions of MAKE for MSDOS. However users of Borland
# MAKE should delete or comment out the following three lines. 
.SWAP :
.SUFFIXES :
.SUFFIXES : .exe .c

# This makefile was tested with several versions of make for MSDOS:
# nmake, pdmake, dmake, ndmake 4.3, and gymake. Borland make will work
# if you follow the previous instructions. Note that ndmake 4.5 is not
# recommended, use ndmake 4.3 instead. GNU make is not recommended for
# use with this particular makefile. The compilers tested were Borland
# Turbo C++ and Microsoft Quick C 2.01.

# uncomment the following three lines for Microsoft Quick C
CC	= qcl 
CFLAGS	= /AL
LDFLAGS= /NOI
# uncomment the following three lines for Borland Turbo C/C++
#CC	= tcc
#CFLAGS	= -ml -O -a -d -k-
#LDFLAGS=

SED	= sed
PERL	= perl
BSHELL	= command /c
ECHO	= $(BSHELL) echo
MV	= $(BSHELL) rename
RM	= $(BSHELL) ..\RMV.BAT
CP	= $(BSHELL) copy
INSTALL	= $(CP) /b
FORCEMAKE = FO.RCE

prefix	= c:\usr\local
exec_prefix = $(prefix)
bindir	= $(exec_prefix)\bin
mandir	= $(prefix)\man\man1

.c.exe:
	$(CC) $(CFLAGS) $<

all : ansi2knr.exe rot13.exe atpdiag.bat

ansi2knr.obj : ansi2knr.c stdio_.h string_.h malloc_.h

rot13.obj :   rot13.c

# The following section is used to automatically edit atpdiag.in to
# create atpdiag.bat. You must have a version of of the standard
# msdos editor 'edlin' for this to work.

makediag.bat : batch\makediag.in
	@$(CP) batch\makediag.in makediag.bat

atpdiag.bat : makediag.bat atpdiag.in
	$(BSHELL) makediag.bat

# this is an alternate way (Unix-like) of making atpdiag.bat:
#atpdiag.bat : atpdiag.in
#	$(SED) -e 4,7d -e s/@PERLPATH@/$(PERL)/ -e /@OS2@/d -e /@UNIX@/d atpdiag.in > atpdiag.tmp
#	$(RM) atpdiag.bat
#	$(MV) atpdiag.tmp atpdiag.bat

..\rmv.bat : batch\rmv.in
	@$(CP) batch\rmv.in $@

convert : ansi2knr.exe
	.\ansi2knr rot13.c >ansi.tmp
	$(MV) rot13.c rot13.c~ 
	$(MV) ansi.tmp rot13.c
	@$(ECHO) "convert" > $@

unconvert : ..\rmv.bat rot13.c~
	@$(RM) rot13.c
	@$(MV) rot13.c~ rot13.c
	@$(RM) convert

install : ansi2knr.exe ansi2knr.1 atpdiag.bat atpdiag.1 rot13.exe rot13.1
	$(INSTALL) rot13.exe $(bindir)
	$(INSTALL) rot13.1 $(mandir)
	$(INSTALL) ansi2knr.exe $(bindir)
	$(INSTALL) ansi2knr.1 $(mandir)
	$(INSTALL) atpdiag.bat $(bindir)
	$(INSTALL) atpdiag.1 $(mandir)

uninstall : ..\rmv.bat $(FORCEMAKE)
	@$(RM) $(bindir)\ansi2knr.exe $(bindir)\atpdiag.bat $(bindir)\rot13.exe
	@$(RM) $(mandir)\ansi2knr.1 $(mandir)\atpdiag.1 $(mandir)\rot13.1

clean : ..\rmv.bat $(FORCEMAKE)
	@$(RM) FORCE clobber clean ansi2knr.exe rot13.exe core erro
	@$(RM) *.obj *.map *.tmp

mclean : clean
	@$(RM) atpdiag.bat makediag.bat *.map *.lst

clobber : clean
	@$(RM) atpdiag atpdiag.cmd atpdiag.bat MAKEDIAG.BAT ansi2knr rot13
	@$(RM) *.o *.bak *.cof *.lst *.map makefile.trb

distclean : clobber
mostlyclean : mclean

edlin.in :
	@echo 5,8d>edlin.in
	@echo s@UNIX@>>edlin.in
	@echo .d>>edlin.in
	@echo s@UNIX@>>edlin.in
	@echo .d>>edlin.in
	@echo s@OS2@>>edlin.in
	@echo .d>>edlin.in
	@echo e>>edlin.in

# This is phony rule. When referenced in a dependency list,
# it will (hopefully) FORCE unconditional build of a target.
$(FORCEMAKE) :
	@$(BSHELL) rem

